#!/usr/bin/env python
## -*- python -*-
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

import ConfigParser
import os
import sys
import argparse
import importlib
from collections import defaultdict
from pprint import pprint
import json

#sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
def import_from(module, name):
    module = importlib.import_module(module)
    return getattr(module, name)


try:
    importlib.import_module('fifo.helper')
#    from fifo.helper import *
except ImportError:
    e = sys.exc_info()
    print e
    print 'PyFi must be installed to use this script. Please find PyFi at https://github.com/project-fifo/pyfi'
    print 'Hint: git clone https://github.com/project-fifo/pyfi.git; cd pyfi; [sudo] python setup.py install'
    print 'You must configure and run PyFi once before using this script.'
    exit(1)



# Parse the arguments ...
parser = argparse.ArgumentParser(description='FiFo Ansible Dynamic Inventory.')
parser.add_argument('--host', action='store_true', help='This returns empty. See info about _meta at: http://docs.ansible.com/developing_inventory.html')
parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1.1')

args, unknown = parser.parse_known_args()

if args.host:
    print '{}'
    exit (0)


Wiggle = import_from("fifo.api.wiggle", "Wiggle")
VM = import_from("fifo.api.vm", "VM")
Groupings = import_from("fifo.api.groupings", "Grouping")

# Constants
DEFAULT_APIVERSION = "0.1.0"

#First we initialize our configuration read the data and generate a default if needed

config = ConfigParser.ConfigParser()
config_file = os.environ.get('HOME') + "/.fifo"

config.read(config_file);

if not config.has_section('GENERAL'):
    print ("Fifo client is not configured! Run 'fifo' to create default config" )
    exit(1)

# Now we initialize our wiggle endpoint
wiggle = Wiggle()




active_config = config.get('GENERAL', 'active')

if not config.has_section(active_config):
    print("Active configuration " + active_config + " does not exist")
    exit(1)


apiVersion = config.get(active_config, 'apiVersion')
host = config.get(active_config, 'host')
user = config.get(active_config, 'user')
pw = config.get(active_config, 'pass')

unsafe = False
if config.has_option(active_config, 'unsafe'):
    if config.get(active_config, 'unsafe').lower() == "true":
        unsafe = True

token = False

if config.has_option(active_config, 'token'):
    token = config.get(active_config, 'token')

wiggle.init(host, user, pw, token, apiVersion, unsafe)
#We check if we can get a valid token from wiggle and store it on our config
if wiggle.get_token():
    config.set(active_config, 'token', wiggle.get_token())
with open(config_file, 'w') as configfile:
    config.write(configfile)

vm = VM(wiggle)
grouping = Groupings(wiggle)

l = vm.full_list(['uuid', 'hostname', 'config', 'groupings', 'metadata'])

AnsibleList = lambda: defaultdict(AnsibleList)

ansibleList = AnsibleList()

for e in l:
    a = e['uuid']

    # Set VM alias, hostnames and friendly name.
    if 'alias' in e['config']:
        ansibleList['_meta']['hostvars'][a]['scm_alias'] = e['config']['alias']

    if 'hostname' in e['config']:
        ansibleList['_meta']['hostvars'][a]['scm_hostname'] = e['config']['hostname']

    # Set VM IP address
    n = e['config']['networks'] or []
    if len(n) > 0:
        ansibleList['_meta']['hostvars'][a]['ansible_ssh_host'] = n[0]['ip']


    # Clusters
    if 'groupings' in e:
        grouping1 = e['groupings']
        for cluster_uuid in grouping1:
            cluster = grouping.get(cluster_uuid)
            clusterid = cluster['uuid']
            if not clusterid in ansibleList:
                ansibleList[clusterid]['hosts'] = []
		ansibleList[clusterid]['scm_group_type'] = 'cluster'
		ansibleList[clusterid]['scm_group_name'] = cluster['name']
            if not a in ansibleList[clusterid]['hosts']:
                ansibleList[clusterid]['hosts'].append(a)
            ansibleList['_meta']['hostvars'][a]['scm_cluster'] = clusterid

    # Stacks
            for grouping2 in cluster['groupings']:
                stack = grouping.get(grouping2)
                stackid = stack['uuid']
                if not stackid in ansibleList:
                    ansibleList[stackid]['hosts'] = []
		    ansibleList[stackid]['scm_group_type'] = 'stack'
		    ansibleList[stackid]['scm_group_name'] = stack['name']
                if not a in ansibleList[stackid]['hosts']:
                    ansibleList[stackid]['hosts'].append(a)
                ansibleList['_meta']['hostvars'][a]['scm_stack'] = stackid

    # Stack vars
		if 'scm' in stack['metadata'] and 'vars' in stack['metadata']['scm']:
                    for v in stack['metadata']['scm']['vars']:
			ansibleList['_meta']['hostvars'][a][v] = stack['metadata']['scm']['vars'][v]

    # Cluster vars
            if 'scm' in cluster['metadata'] and 'vars' in cluster['metadata']['scm']:
                for v in cluster['metadata']['scm']['vars']:
                     ansibleList['_meta']['hostvars'][a][v] = cluster['metadata']['scm']['vars'][v]

    # Set VM variables
    if 'scm' in e['metadata'] and 'vars' in e['metadata']['scm']:
        for v in e['metadata']['scm']['vars']:
            ansibleList['_meta']['hostvars'][a][v] = e['metadata']['scm']['vars'][v]


    # VM metadata groups
    if 'scm' in e['metadata'] and 'roles' in e['metadata']['scm']:
        roles = e['metadata']['scm']['roles']
        for r in roles:
            if "enabled" in roles[r] and roles[r]["enabled"] == "1":
                if not r in ansibleList:
                    ansibleList[r]['hosts'] = []
		    ansibleList[r]['scm_group_type'] = 'role'
		    ansibleList[r]['scm_group_name'] = r
                ansibleList[r]['hosts'].append(a)


print(json.dumps(ansibleList, sort_keys=True, indent=2, separators=(',', ': ')))

