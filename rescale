#!/usr/bin/env python
## -*- python -*-
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4

# Kevin M. Meziere <kmeziere@jpcatholic.com>
# Copyright 2015, John Paul the Great Catholic University

# The MIT License (MIT)
#
# Copyright (c) 2015 John Paul the Great Catholic University
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import ConfigParser
import os
import sys
import argparse
import importlib
import re
import json
from collections import defaultdict
from lib.name_gen import get_full_name

def import_from(module, name):
    module = importlib.import_module(module)
    return getattr(module, name)

def try_except(success, failure, *exceptions):
    try:
        return success()
    except exceptions or Exception:
    	if callable(failure):
    		return failure()
    	elif failure:
    		return failure
    	else:
    		'failure'

def valid_uuid(uuid):
	uuid4hex = re.compile('^[a-f0-9]{8}-?[a-f0-9]{4}-?4[a-f0-9]{3}-?[89ab][a-f0-9]{3}-?[a-f0-9]{12}\Z', re.I)
	match = uuid4hex.match(uuid)
	return bool(match)

try:
    importlib.import_module('fifo.helper')
#    from fifo.helper import *
except ImportError:
    e = sys.exc_info()
    print e
    print 'PyFi must be installed to use this script. Please find PyFi at https://github.com/project-fifo/pyfi'
    print 'Hint: git clone https://github.com/project-fifo/pyfi.git; cd pyfi; [sudo] python setup.py install'
    print 'You must configure and run PyFi once before using this script.'
    exit(1)

def main():
	# Parse the arguments ...
	parser = argparse.ArgumentParser(description='Fifo Cluster Rescaler.')
	parser.add_argument('UUID', help='UUID of grouping to rescale.')
	parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1.0')

	args, unknown = parser.parse_known_args()

	# Validate args
	if not valid_uuid(args.UUID):
		print("Invalid grouping uuid")
		exit(1)

	Wiggle = import_from("fifo.api.wiggle", "Wiggle")
	VM = import_from("fifo.api.vm", "VM")
	Groupings = import_from("fifo.api.groupings", "Grouping")

	# Constants
	DEFAULT_APIVERSION = "2"

	#First we initialize our configuration read the data and generate a default if needed

	config = ConfigParser.ConfigParser()
	config_file = os.environ.get('HOME') + "/.fifo"

	config.read(config_file);

	if not config.has_section('GENERAL'):
	    print ("Fifo client is not configured! Run 'fifo' to create default config" )
	    exit(1)

	# Now we initialize our wiggle endpoint
	wiggle = Wiggle()

	active_config = config.get('GENERAL', 'active')

	if not config.has_section(active_config):
	    print("Active configuration " + active_config + " does not exist")
	    exit(1)

	apiVersion = config.get(active_config, 'apiVersion')
	host = config.get(active_config, 'host')
	user = config.get(active_config, 'user')
	pw = config.get(active_config, 'pass')

	unsafe = False
	if config.has_option(active_config, 'unsafe'):
	    if config.get(active_config, 'unsafe').lower() == "true":
	        unsafe = True

	token = False

	if config.has_option(active_config, 'token'):
	    token = config.get(active_config, 'token')

	wiggle.init(host, user, pw, token, apiVersion, unsafe)
	#We check if we can get a valid token from wiggle and store it on our config
	if wiggle.get_token():
	    config.set(active_config, 'token', wiggle.get_token())
	with open(config_file, 'w') as configfile:
	    config.write(configfile)

	vm = VM(wiggle)
	grouping = Groupings(wiggle)

	grouping1 = None
	try:
	    grouping1 = grouping.get(args.UUID)
	except Exception:
		print 'Invalid grouping UUID ' + args.UUID
		exit (1)

	groupingsList = None
	if grouping1['type'] == 'stack':
		groupingList = grouping1['elements']
	else:
		groupingList = [grouping1['uuid']]

	for rescalegroup in groupingList:
		rescalegroup1 = None
		try:
			rescalegroup1 = grouping.get(rescalegroup)
		except Exception:
			print 'Invalid grouping UUID: ' + rescalegroup

		rescalegroup1targetstr = None
		if 'scm' in rescalegroup1['metadata'] and \
			'autoscale' in rescalegroup1['metadata']['scm'] and \
			'target' in rescalegroup1['metadata']['scm']['autoscale']:
			rescalegroup1targetstr = rescalegroup1['metadata']['scm']['autoscale']['target']

		if not rescalegroup1targetstr:
			print 'Autoscale target size not set for grouping ' + rescalegroup
			continue

		rescalegroup1target = None
		try:
			rescalegroup1target = int(rescalegroup1targetstr)
		except Exception:
			print 'Autoscale target size not a number for grouping ' + rescalegroup
			continue

		if rescalegroup1target < 1:
			print 'Invalid target size. Cannot autoscale grouping ' + rescalegroup

		rescalegroup1len = len(rescalegroup1['elements'])
		if rescalegroup1len < 0:
			print 'Invalid grouping size. Cannot autoscale grouping ' + rescalegroup
			continue

		rescalegroupPackage = None
		if 'package' in rescalegroup1['metadata']['scm']['autoscale']:
				rescalegroupPackage = rescalegroup1['metadata']['scm']['autoscale']['package']
		else:
			print 'No default package. Cannot autoscale grouping ' + rescalegroup
			continue

		rescalegroupDataset = None
		if 'dataset' in rescalegroup1['metadata']['scm']['autoscale']:
				rescalegroupDataset = rescalegroup1['metadata']['scm']['autoscale']['dataset']
		else:
			print 'No default dataset. Cannot autoscale grouping ' + rescalegroup
			continue

		rescalegroupTemplate = None
		if 'template' in rescalegroup1['metadata']['scm']['autoscale']:
				rescalegroupTemplate = rescalegroup1['metadata']['scm']['autoscale']['template']
		else:
			print 'No default template. Cannot autoscale grouping ' + rescalegroup
			continue

		rescalegroupTemplateDomain = None
		if 'domain' in rescalegroupTemplate:
				rescalegroupTemplateDomain = rescalegroupTemplate['domain']
				del rescalegroupTemplate['domain']
		else:
			print 'Grouping template domain not set. Cannot autoscale grouping ' + rescalegroup
			continue


		if rescalegroup1len < rescalegroup1target:
			rescalegroup1diff = 0
			rescalegroup1diff = rescalegroup1target - rescalegroup1len

			for i in range(0, rescalegroup1diff):
				vm_name = get_full_name()
				vm_config = rescalegroupTemplate
				vm_config['alias'] = vm_name
				vm_config['hostname'] = vm_name + "." + rescalegroupTemplateDomain
				vm.vm_create(vm_config)
				print('Creating VM with the following:')
				print rescalegroupPackage
				print rescalegroupDataset
				print json.dumps(vm_config, sort_keys=True, indent=2, separators=(',', ': '))



if __name__ == "__main__":
	main()