---
# Deploy Python - This allows us to use other Ansible commands than "raw"

  # A simple check if python is alreay installed.
  - name: Test if Python is installed  # This is just a name we give the task. It can be anything.
    raw: "[ -f /opt/local/bin/python2.7 ] && echo -n \"1\" || echo -n \"0\"" # The task we want to run.
    register: PythonTest # Save the output to a variable called "PythonTest"

  # Here we do the actual installation. We could setup pkgin, but for one package
  # it is not necessary. Also not having it keeps a bit of clutter out of our gz.
  - name: Install Python 
    raw: "pkg_add http://pkgsrc.joyent.com/packages/SmartOS/2013Q3/x86_64/python/python27-2.7.5nb3.tgz"
    when: PythonTest.stdout != "1" # Only run this command if the stdout stored in "PythonTest" is "1"


# Shell Shock Patch - Patch Bash
# Patched file from https://us-east.manta.joyent.com/rmustacc/public/sec/CVE-2014-6271/bash
# SHA512 15471784801dbc3ce7ea156177fdefb45e5b18e55c44bb4822e777b64786bb466748662fb43ff261bb4f9b84ab1ff1bbc796bde31e8dc3e960ca808bbddad8cb

########################################################################################
#
#  ALERT!
#  This is not a permanent fix! It must be ran after each reboot of the hypervisor!
#
########################################################################################

  # NOTE: You may not need this! We keep this in becasue we run an older platform image of smartos,
  #       it is possible that more recent versions of smartos include a patched Bash.

  # In this first step we check to see if the hypervisor is vulnerable
  # It is possible to craft a check that will return success on absence of the vulerability
  # but we prefer this method because it uses the standard check
  - name: Check for Shellshock ** THIS TASK SHOULD FAIL! **
    command: "env x='() { :;}; echo -n 1' bash -c \"\""
    register: SSVulnerable
    changed_when: SSVulnerable.rc != 2 # Notify operator of vulnerability when rc is not 2 (failure)
    ignore_errors: True # Ansible will typically stop processing plays if it comes across an error.
                        # We expect an error so we instruct processing to continue

  - name: Download patched bash
    copy: src=bash dest=/var/tmp/bash owner=root group=bin mode="555" # Copy patched file from local "files" folder
                                                                      # to host. Set correct owner/perms.
    when: SSVulnerable.stdout == "1" # We will only do this if host if vulnerable

  - name: Apply patched bash
    command: "mount -O -F lofs /var/tmp/bash /usr/bin/bash" # Use command to run system commnad (mount)
    when: SSVulnerable.stdout == "1"
